use agg_example;
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// Selecione todos os clientes com as suas respectivas transações feitas;
db.clients.aggregate(
  [
    {
      $lookup: {
        from: "transactions",
        let: { user_name: "$name" },
        pipeline: [
          {
            $match: {
              $expr: {
                $eq: ["$from", "$$user_name"],
              }
            }
          }
        ],
        as: "transactions"
      }
    }
  ]
);

//Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
db.clients.aggregate(
  [
    {
      $lookup: {
        from: "transactions",
        let: { user_name: "$name" },
        pipeline: [
          {
            $match: {
              $expr: {
                $eq: ["$to", "$$user_name"],
              }
            }
          }
        ],
        as: "recived_transactions"
      }
    },
    {
      $sort: { state: 1}
    },
    {
      $limit: 4
    }
  ]
);

//Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
db.clients.aggregate(
  [
    {
      $match: { State: "Florida"}
    },
    {
      $lookup: {
        from: "transactions",
        let: { user_name: "$name" },
        pipeline: [
          {
            $match: {
              $expr: {
                $eq: ["$from", "$$user_name"],
              }
            }
          }
        ],
        as: "transactions_florida"
      }
    }
  ]
);

db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);

db.products.find()

//Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
db.products.aggregate(
  [
    { $project: { name: 1, total: { $add: ["$purchase_price", "$taxes"]}}}
  ]
)

// Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.
db.products.aggregate(
  [
    { 
      $project: { 
        name: 1, 
        total_profit: {
          $subtract: [
            "$sale_price",
            { $add: ["$purchase_price", "$taxes"] } 
          ]
        }
      }
    }
  ]
)

//Retorne o menor número inteiro relativo ao preço de venda de cada produto;
db.products.aggregate(
  [
    { $project: { _id: 0,name: 1, minValue: { $floor: [ "$sale_price"]}}}
  ]
)

//Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)
db.products.aggregate(
  [
    { $project: { _id: 0,name: 1, 
    maxValue: { 
            $ceil: {
            $subtract: ["$sale_price", "$purchase_price"]
          }
        }
      }
    }
  ]
)

db.products.aggregate(
  [
    {
      $addFields: {
        stock_total: { $multiply: ["$sale_price", "$quantity"]}
      }
    }
  ]
)

db.clients.find();

//Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes.
use('erp')
db.clientes.aggregate([
  {
$addFields: {
      idade: {
$floor: {
$divide: [
            { $subtract: ["$$NOW", "$dataNascimento"] },
            { $multiply: [86400000, 365] }
          ]
        }
      }
    }
  },
]);

//Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.
use('erp')
db.clientes.aggregate([
  {
$addFields: {
      idade: {
$floor: {
$divide: [
            { $subtract: ["$$NOW", "$dataNascimento"] },
            { $multiply: [86400000, 365] }
          ]
        }
      }
    }
  },
  {
    $match: {
      idade: {
        $gte: 18, $lte: 25
      }
    }
  },
  {
    $count: 'totalClients'
  }
]);

//Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras .
use('erp')
db.clientes.aggregate([
  {
$addFields: {
      idade: {
$floor: {
$divide: [
            { $subtract: ["$$NOW", "$dataNascimento"] },
            { $multiply: [86400000, 365] }
          ]
        }
      }
    }
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clienteId",
      foreignField: "clienteId",
      as: 'compras'
    }
  }
]);

//Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020 .
use('erp')
db.clientes.aggregate([
  {
$addFields: {
      idade: {
$floor: {
$divide: [
            { $subtract: ["$$NOW", "$dataNascimento"] },
            { $multiply: [86400000, 365] }
          ]
        }
      }
    }
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clienteId",
      foreignField: "clienteId",
      as: 'compras'
    }
  },
  {
    $match: {
      'compras.dataVenda': { 
        $gte: ISODate('2019-06-01'), 
        $lte: ISODate('2020-03-31')
      }
    }
  }
]);

//Confira o número de documentos retornados pelo pipeline com o método itcount() . Até aqui, você deve ter 486 documentos sendo retornados.
use('erp')
db.clientes.aggregate([
  {
$addFields: {
      idade: {
$floor: {
$divide: [
            { $subtract: ["$$NOW", "$dataNascimento"] },
            { $multiply: [86400000, 365] }
          ]
        }
      }
    }
  },
  {
    $lookup: {
      from: "vendas",
      localField: "clienteId",
      foreignField: "clienteId",
      as: 'compras'
    }
  },
  {
    $match: {
      'compras.dataVenda': { 
        $gte: ISODate('2019-06-01'), 
        $lte: ISODate('2020-03-31')
      }
    }
  }
]).itcount();
